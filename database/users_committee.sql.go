// Code generated by sqlc. DO NOT EDIT.
// source: users_committee.sql

package database

import (
	"context"
)

const getPositionUsers = `-- name: GetPositionUsers :many
SELECT users.id, users.username, users.name, users.bio
FROM users
    INNER JOIN users_committee uc on users.id = uc.user_id
    INNER JOIN committee c on uc.committee_id = c.id
WHERE c.id = $1
`

func (q *Queries) GetPositionUsers(ctx context.Context, id int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getPositionUsers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPositions = `-- name: GetUserPositions :many
SELECT committee.id, committee.name, committee.alias, committee.ordering, committee.description, committee.executive
FROM committee
    INNER JOIN users_committee uc on committee.id = uc.committee_id
    INNER JOIN users u on uc.user_id = u.id
WHERE u.id = $1
`

func (q *Queries) GetUserPositions(ctx context.Context, id int32) ([]Position, error) {
	rows, err := q.db.QueryContext(ctx, getUserPositions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Alias,
			&i.Ordering,
			&i.Description,
			&i.Executive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
